#!/usr/bin/env ruby

require "google/cloud/firestore"
require "byebug"
require "pp"
require "net/http"
require "uri"
require "json"
require "date"

FIRESTORE_DB_ID = "page-speed-insights-db"
BASE_URL = "https://www.googleapis.com/pagespeedonline/v5/runPagespeed"
PSI_DEVICE_TYPES = %w(mobile desktop)
CREDENTIALS_JSON_FILE = "google-api-key.json"

unless File.exist?(CREDENTIALS_JSON_FILE)
  File.open(CREDENTIALS_JSON_FILE, "w") do |file|
    file.puts(ENV["GOOGLE_API_KEY_JSON"])
  end
end

@firestore = Google::Cloud::Firestore.new(
  project_id: FIRESTORE_DB_ID,
  credentials: "./google-api-key.json"
)

collections = @firestore.list_collections.map(&:collection_id)

unless collections.include?("reports")
  @firestore.col("reports").add
end

unless collections.include?("pages")
  @firestore.col("pages").add

  puts "--> Head over to https://console.firebase.google.com/u/0/project/#{FIRESTORE_DB_ID}/firestore/data/ and add some URLs to monitor"

  return
end

def parametrize(key)
  key.gsub(/[^a-z0-9\-_]+/, "_")
end

def persist(url, device_type, report_data)
  reports_collection = @firestore.col("reports")

  url_report = reports_collection.doc(parametrize(url)).set({
    original_url: url,
    device_type => {
      Time.now.utc => report_data
    }
  }, merge: true)
end

def extract_metric(raw_data, *json_keys)
  raw_data.dig("lighthouseResult", "audits", *json_keys)
end

def fetch(device_type, url)
  params = {
    url: url,
    strategy: device_type,
    category: "performance",
    locale: "en"
  }

  uri = URI.parse(BASE_URL)
  uri.query = URI.encode_www_form(params)

  response = Net::HTTP.get(uri)

  raw_data = JSON.parse(response)

  return raw_data if raw_data.has_key?("error")

  {
    speed_index: (extract_metric(raw_data, "speed-index", "score") * 100).to_i,
    first_contentful_paint: extract_metric(raw_data, "first-contentful-paint", "displayValue").to_f,
    time_to_interactive: extract_metric(raw_data, "interactive", "displayValue").to_f,
    first_meaningful_paint: extract_metric(raw_data, "first-meaningful-paint", "displayValue").to_f,
    first_cpu_idle: extract_metric(raw_data, "first-cpu-idle", "displayValue").to_f
  }
end

def download_report(url)
  # Let's warm up cache in case a page hasn't been cached via CDN
  # or a server-side cache
  system `curl #{url} --output /dev/null`

  PSI_DEVICE_TYPES.each do |device_type|
    report_data = fetch(device_type, url)

    if report_data.has_key?("error")
      puts "--> Error while fetching #{device_type} report for #{url}"
      puts "--> #{report_data}"
      puts

      next
    else
      puts "--> Saving #{device_type} report for #{url}"
    end

    persist(url, device_type, report_data)

    sleep(2)
  end
end

@firestore.col("pages").get do |page|
  url = page.data[:url]

  if url.nil?
    puts "--> Page document #{page.document_id} has no URL key"
    next
  end

  download_report(url)

  # We need to make sure we don't exceed API quota:
  # 25,000 requests / day and 1 requests / second
  sleep(2)
end

puts "--> Done and dusted 🍻"
